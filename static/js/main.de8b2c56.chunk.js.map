{"version":3,"sources":["store/index.ts","helpers.js","components/Todo/Todo.jsx","components/TodoLIst/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.jsx"],"names":["setUserId","userId","type","getUserId","state","getQuery","query","getFilterType","filterType","initialState","store","createStore","action","composeWithDevTools","BASE_URL","request","url","fetch","then","response","json","catch","error","loadUser","Todo","title","completed","dispatch","useDispatch","selectedId","useSelector","className","classNames","readOnly","onClick","TodoList","useState","todos","setTodos","downloadTodos","a","data","filter","todo","Object","values","some","field","result","filteredTodos","useMemo","alltTodos","status","completedTodos","uncompletedTodos","filterByStatus","toLowerCase","currentQuery","includes","useEffect","placeholder","name","value","onChange","event","target","setQuery","setFilterType","disabled","map","key","id","CurrentUser","selectedUserDetails","setSelectedUserDetails","isUserError","setIsUserError","loadData","selectedUser","email","phone","App","selectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de8b2c56.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst SELECT_USER_ID = 'SELECT_USER_ID';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_FILTER_TYPE = 'SET_FILTER_TYPE';\n\n// Action creators - a function returning an action object\nexport const setUserId = (userId = 0) => ({ type: SELECT_USER_ID, userId });\nexport const setQuery = (query: string) => ({ type: SET_QUERY, query });\nexport const setFilterType = (filterType: string) => ({ type: SET_FILTER_TYPE, filterType });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getUserId = (state: RootState) => state.userId;\nexport const getQuery = (state: RootState) => state.query;\nexport const getFilterType = (state: RootState) => state.filterType;\n\n// Initial state\nexport type RootState = {\n  userId: number;\n  query: string;\n  filterType: string;\n};\n\nconst initialState: RootState = {\n  userId: 0,\n  query: '',\n  filterType: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SELECT_USER_ID:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query,\n      };\n\n    case SET_FILTER_TYPE:\n      return {\n        ...state,\n        filterType: action.filterType,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => (\n  fetch(url)\n    .then(response => response.json())\n    .catch(error => error)\n);\n\nexport function loadTodos() {\n  return request(`${BASE_URL}/todos`)\n    .then(response => response.data.filter((todo) => {\n      if (Object.values(todo)\n        .some(field => field === null || field === '')) {\n        return false;\n      }\n\n      return todo;\n    }));\n}\n\nexport function loadUser(userId) {\n  return request(`${BASE_URL}/users/${userId}`);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setUserId, getUserId } from '../../store/index';\n\nexport const Todo = ({\n  userId,\n  title,\n  completed,\n}) => {\n  const dispatch = useDispatch();\n  const selectedId = useSelector(getUserId);\n\n  const onUserSelect = (id) => {\n    dispatch(setUserId(id));\n  };\n\n  return (\n    <li className={classNames('TodoList__item', {\n      'TodoList__item--checked': completed,\n      'TodoList__item--unchecked': !completed,\n    })}\n    >\n      <label>\n        <input type=\"checkbox\" readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames(`\n        TodoList__user-button button`, {\n          'TodoList__user-button--selected': userId === selectedId,\n        })}\n        onClick={() => onUserSelect(userId)}\n        type=\"button\"\n      >\n        User #\n        {userId}\n      </button>\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React, { useMemo, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadTodos } from '../../helpers';\nimport { Todo } from '../Todo/Todo';\nimport './TodoList.scss';\nimport {\n  setQuery,\n  getQuery,\n  setFilterType,\n  getFilterType,\n} from '../../store/index';\n\nexport const TodoList = () => {\n  const [todos, setTodos] = useState([]);\n\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery);\n  const filterType = useSelector(getFilterType);\n\n  const downloadTodos = async () => {\n    const result = await loadTodos();\n\n    setTodos(result);\n  };\n\n  const filterByStatus = (alltTodos, status) => {\n    const completedTodos = alltTodos.filter(todo => todo.completed);\n    const uncompletedTodos = alltTodos.filter(todo => !todo.completed);\n\n    switch (status) {\n      case 'completed':\n        return completedTodos;\n\n      case 'uncompleted':\n        return uncompletedTodos;\n\n      case 'all':\n      default: return todos;\n    }\n  };\n\n  const filteredTodos = useMemo(() => {\n    const result = filterByStatus(todos, filterType);\n\n    return result.filter(todo => {\n      const title = todo.title.toLowerCase();\n      const currentQuery = query.toLowerCase();\n\n      return title.includes(currentQuery);\n    });\n  }, [filterType, todos, query]);\n\n  const queryHandler = (event) => {\n    const { value } = event.target;\n\n    dispatch(setQuery(value));\n  };\n\n  const setFilter = (event) => {\n    const { value } = event.target;\n\n    dispatch(setFilterType(value));\n  };\n\n  useEffect(() => {\n    downloadTodos();\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"find ToDo\"\n          name=\"query\"\n          value={query}\n          onChange={queryHandler}\n        />\n        <select\n          value={filterType}\n          name=\"option\"\n          onChange={setFilter}\n        >\n          <option value=\"initial\" disabled>\n            choose parameter\n          </option>\n          <option\n            value=\"completed\"\n          >\n            completed\n          </option>\n          <option value=\"uncompleted\">\n            uncompleted\n          </option>\n          <option value=\"all\">\n            all\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <Todo\n              key={todo.id}\n              completed={todo.completed}\n              userId={todo.userId}\n              title={todo.title}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { loadUser } from '../../helpers';\nimport './CurrentUser.scss';\nimport { setUserId } from '../../store/index';\n\nexport const CurrentUser = ({ userId }) => {\n  const [selectedUserDetails, setSelectedUserDetails] = useState([]);\n  const [isUserError, setIsUserError] = useState(false);\n  const dispatch = useDispatch();\n\n  const loadData = async () => {\n    const selectedUser = await loadUser(userId);\n\n    if (selectedUser.data === null) {\n      setIsUserError(true);\n\n      return false;\n    }\n\n    setSelectedUserDetails(selectedUser.data);\n    setIsUserError(false);\n  };\n\n  useEffect(() => {\n    loadData();\n  });\n\n  const onUserReset = () => {\n    dispatch(setUserId(0));\n  };\n\n  return (\n    <>\n      {isUserError ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>Invalid User</span></h2>\n        </div>\n      )\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {userId}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUserDetails.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUserDetails.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUserDetails.phone}</p>\n          </div>\n        )}\n      <button\n        type=\"button\"\n        onClick={onUserReset}\n      >\n        Clear\n      </button>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { getUserId } from './store/index';\nimport { TodoList } from './components/TodoLIst/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  const selectedUserId = useSelector(getUserId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}